% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/st_parrallel.R
\name{st_parallel}
\alias{st_parallel}
\title{Paralise any simple features analysis.
thanks Phil Donovan @philip_donovan
originally posted here https://www.spatialanalytics.co.nz/post/2018/04/01/fixing-st-par/}
\usage{
st_parallel(sf_df, sf_func, n_cores, ...)
}
\arguments{
\item{sf_df}{simple features data frame. This is the input sf object.}

\item{n_cores}{the number of cores to use.}

\item{...}{other options associated with the chosen sf_function}

\item{sf_function}{the sf function you wish to perform}
}
\description{
This function parallelizes sf functions to speed-up larger processing tasks by using multiple cores. https://www.spatialanalytics.co.nz/post/2018/04/01/fixing-st-par/ for additional information
}
\examples{
library(spData)
data(us_states)
us_states |> plot()

# make points within states
# make a bounding box
us_states_union <-
  us_states |>
  dplyr::group_by() |>
  dplyr::summarise()

# make points inside polygon
sample_size <- 1e4
us_points <-
  sf::st_sample(us_states_union, size = sample_size) |>
  sf::st_as_sf() |>
  tibble::rowid_to_column(var = 'id')

# spatially join the points to the original polygons with sf::st_intersection
# withOUT parallelization
start.time <- Sys.time()
intersect_serial <-
  us_points |>
   st_intersection(us_states)
end.time <- Sys.time()
end.time - start.time # elapsed time, in serial

# now WITH parallelization, but first how many cores are available?
parallel::detectCores()  # n_cores needs to be less than this number
start.time <- Sys.time()
intersect_parallel <-
  us_points |>
  st_parallel(
      sf_func = st_intersection
    , n_cores = 3
    , us_states
  )
end.time <- Sys.time()
end.time - start.time # elapsed time, in parallel, roughly a 3x speed up
}
